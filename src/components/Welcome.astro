---
// HeroSection.astro (完全中央揃え版)
---

<section
  class="relative w-full min-h-screen overflow-hidden flex items-center justify-center bg-gradient-to-b from-gray-900 via-blue-900 to-indigo-900"
>
  <!-- 強化した幾何学模様の背景 -->
  <div class="absolute inset-0 z-0 overflow-hidden">
    <!-- 3D幾何学アニメーション -->
    <div id="three-container" class="absolute inset-0"></div>

    <!-- パーティクルレイヤー -->
    <div class="particle-container absolute inset-0"></div>

    <!-- グラデーションオーバーレイ -->
    <div
      class="absolute inset-0 bg-gradient-to-tr from-blue-900/40 via-transparent to-transparent"
    >
    </div>

    <!-- 幾何学模様オーバーレイ -->
    <div class="absolute inset-0 geometric-grid opacity-40"></div>

    <!-- 六角形パターン -->
    <div
      class="absolute top-0 right-0 w-full h-full hexagon-pattern opacity-20"
    >
    </div>

    <!-- サークルパターン - より大きく、目立つように -->
    <div
      class="absolute top-0 left-0 w-full h-full circle-pattern-large opacity-25"
    >
    </div>

    <!-- 対角線パターン -->
    <div
      class="absolute bottom-0 right-0 w-full h-full diagonal-pattern opacity-15"
    >
    </div>

    <!-- 波形パターン -->
    <div class="absolute right-0 top-1/3 wave-pattern opacity-15 w-full h-64">
    </div>

    <!-- 幾何学装飾要素 - 明示的な形状 -->
    <div class="absolute top-20 right-20 geometric-square opacity-40"></div>
    <div class="absolute bottom-40 left-20 geometric-circle opacity-30"></div>
    <div class="absolute top-1/3 left-1/4 geometric-triangle opacity-25"></div>
    <div class="absolute bottom-1/4 right-1/4 geometric-diamond opacity-30">
    </div>
  </div>

  <div
    class="container mx-auto px-4 md:px-8 relative z-10 flex flex-col items-center justify-center py-16"
  >
    <!-- ヒーローコンテンツ - 中央揃え -->
    <div class="text-center max-w-2xl">
      <h1 class="text-4xl md:text-5xl font-light leading-tight text-white">
        Webで、温かいつながりを。
      </h1>

      <p class="mt-6 text-lg text-gray-300 mx-auto font-light leading-relaxed">
        十勝・帯広の皆様のデジタルの可能性を広げる、温もりのあるWebソリューション
      </p>

      <div
        class="mt-10 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-6 justify-center"
      >
        <a
          href="#services"
          class="relative px-8 py-3 overflow-hidden text-white transition-all bg-indigo-600 group rounded-sm hover:bg-indigo-700 shadow-lg shadow-indigo-600/30"
        >
          <span
            class="absolute inset-0 w-0 bg-white/10 transition-all duration-300 ease-out group-hover:w-full"
          ></span>
          <span
            class="relative flex items-center justify-center text-sm tracking-wider"
          >
            サービスを見る
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
            </svg>
          </span>
        </a>
        <a
          href="#contact"
          class="relative overflow-hidden text-indigo-300 transition-all border border-indigo-600/60 group rounded-sm px-8 py-3 hover:border-indigo-400/80"
        >
          <span
            class="absolute inset-0 w-0 bg-indigo-600/20 transition-all duration-300 ease-out group-hover:w-full"
          ></span>
          <span
            class="relative flex items-center justify-center text-sm tracking-wider group-hover:text-white"
          >
            無料相談する
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-4 h-4 ml-2 opacity-0 group-hover:opacity-100 transform -translate-x-2 group-hover:translate-x-0 transition-all"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
              ></path>
            </svg>
          </span>
        </a>
      </div>
    </div>

    <!-- 実績ハイライト - 中央揃え -->
    <!-- 実績ハイライト - ビジュアル強化版 -->
    <div class="mt-20 mb-6 max-w-5xl mx-auto">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8">
        <!-- プロジェクト実績 -->
        <div
          class="group relative overflow-hidden backdrop-blur-md bg-white/5 border border-white/10 p-6 rounded-sm transition-all duration-300 hover:bg-indigo-900/20 hover:border-indigo-500/30 hover:shadow-lg hover:shadow-indigo-500/10"
        >
          <!-- 装飾的な背景要素 -->
          <div
            class="absolute -right-12 -top-12 w-32 h-32 bg-indigo-600/10 rounded-full blur-2xl transform group-hover:scale-150 transition-transform duration-700"
          >
          </div>
          <div
            class="absolute -left-16 -bottom-16 w-40 h-40 bg-blue-600/10 rounded-full blur-3xl transform group-hover:scale-150 transition-transform duration-700"
          >
          </div>

          <!-- アイコン -->
          <div class="relative flex justify-center mb-4">
            <div
              class="w-14 h-14 flex items-center justify-center rounded-full bg-indigo-500/10 text-indigo-400 mb-1"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-7 w-7"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                ></path>
              </svg>
            </div>
          </div>

          <!-- 数字とテキスト -->
          <div class="relative text-center">
            <div class="flex items-center justify-center">
              <span class="text-5xl font-light text-white"> 100 </span>
              <span class="text-indigo-400 text-3xl ml-1 font-light">+</span>
            </div>
            <span
              class="text-gray-300 text-sm tracking-wider block mt-2 group-hover:text-indigo-300 transition-colors"
            >
              制作プロジェクト
            </span>
            <p
              class="mt-3 text-xs text-gray-400 leading-relaxed opacity-70 group-hover:opacity-100 transition-opacity"
            >
              Shopify、Astro、WordPressなど、多様な技術スタックで最適なサイトを開発
            </p>
          </div>
        </div>

        <!-- パフォーマンス -->
        <div
          class="group relative overflow-hidden backdrop-blur-md bg-white/5 border border-white/10 p-6 rounded-sm transition-all duration-300 hover:bg-indigo-900/20 hover:border-indigo-500/30 hover:shadow-lg hover:shadow-indigo-500/10"
        >
          <!-- 装飾的な背景要素 -->
          <div
            class="absolute -right-12 -top-12 w-32 h-32 bg-indigo-600/10 rounded-full blur-2xl transform group-hover:scale-150 transition-transform duration-700"
          >
          </div>
          <div
            class="absolute -left-16 -bottom-16 w-40 h-40 bg-blue-600/10 rounded-full blur-3xl transform group-hover:scale-150 transition-transform duration-700"
          >
          </div>

          <!-- アイコン -->
          <div class="relative flex justify-center mb-4">
            <div
              class="w-14 h-14 flex items-center justify-center rounded-full bg-indigo-500/10 text-indigo-400 mb-1"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-7 w-7"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
          </div>

          <!-- 数字とテキスト -->
          <div class="relative text-center">
            <div class="flex items-center justify-center">
              <span class="text-5xl font-light text-white"> 90 </span>
              <span class="text-indigo-400 text-3xl ml-1 font-light">+</span>
            </div>
            <span
              class="text-gray-300 text-sm tracking-wider block mt-2 group-hover:text-indigo-300 transition-colors"
            >
              サイトスピード評価
            </span>
            <p
              class="mt-3 text-xs text-gray-400 leading-relaxed opacity-70 group-hover:opacity-100 transition-opacity"
            >
              ページ読み込み速度を徹底的に最適化し、高速で快適なユーザー体験を提供
            </p>
          </div>
        </div>

        <!-- 教育・指導 -->
        <div
          class="group relative overflow-hidden backdrop-blur-md bg-white/5 border border-white/10 p-6 rounded-sm transition-all duration-300 hover:bg-indigo-900/20 hover:border-indigo-500/30 hover:shadow-lg hover:shadow-indigo-500/10"
        >
          <!-- 装飾的な背景要素 -->
          <div
            class="absolute -right-12 -top-12 w-32 h-32 bg-indigo-600/10 rounded-full blur-2xl transform group-hover:scale-150 transition-transform duration-700"
          >
          </div>
          <div
            class="absolute -left-16 -bottom-16 w-40 h-40 bg-blue-600/10 rounded-full blur-3xl transform group-hover:scale-150 transition-transform duration-700"
          >
          </div>

          <!-- アイコン -->
          <div class="relative flex justify-center mb-4">
            <div
              class="w-14 h-14 flex items-center justify-center rounded-full bg-indigo-500/10 text-indigo-400 mb-1"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-7 w-7"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                ></path>
              </svg>
            </div>
          </div>

          <!-- 数字とテキスト -->
          <div class="relative text-center">
            <div class="flex items-center justify-center">
              <span class="text-5xl font-light text-white"> 3 </span>
              <span class="text-indigo-400 text-3xl ml-1 font-light">年</span>
            </div>
            <span
              class="text-gray-300 text-sm tracking-wider block mt-2 group-hover:text-indigo-300 transition-colors"
            >
              専門知識と実績
            </span>
            <p
              class="mt-3 text-xs text-gray-400 leading-relaxed opacity-70 group-hover:opacity-100 transition-opacity"
            >
              侍エンジニア講師としての経験を活かした、確かな技術力と教育力
            </p>
          </div>
        </div>
      </div>

      <!-- 補足説明テキスト -->
      <div class="text-center mt-8">
        <p class="text-xs text-gray-400 tracking-wide max-w-2xl mx-auto">
          スポーツ、美容など多様な業種に対応。クライアントのニーズに合わせた最適なソリューションを提供します。
        </p>
      </div>
    </div>
  </div>

  <!-- 下部の装飾 -->
  <div class="absolute bottom-0 left-0 w-full overflow-hidden">
    <!-- 波パターン -->
    <svg
      class="absolute bottom-0 left-0 w-full"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1440 200"
      preserveAspectRatio="none"
    >
      <path
        fill="#1E293B"
        fill-opacity="0.5"
        d="M0,64L60,64C120,64,240,64,360,74.7C480,85,600,107,720,112C840,117,960,107,1080,101.3C1200,96,1320,96,1380,96L1440,96L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"
      >
      </path>
    </svg>

    <!-- ミニマルな山々のシルエット - 十勝の丘陵地帯を表現 -->
    <svg
      class="absolute bottom-0 left-0 w-full"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1440 100"
      preserveAspectRatio="none"
    >
      <path
        fill="#1E293B"
        fill-opacity="0.7"
        d="M0,80 L80,60 L160,90 L240,70 L320,90 L400,50 L480,70 L560,50 L640,80 L720,60 L800,90 L880,70 L960,50 L1040,80 L1120,60 L1200,90 L1280,60 L1360,80 L1440,60 L1440,100 L0,100 Z"
      >
      </path>
    </svg>

    <!-- 十勝パノラマシルエット（より詳細な山々のシルエット） -->
    <svg
      class="absolute bottom-0 left-0 w-full"
      height="40"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1440 40"
      preserveAspectRatio="none"
    >
      <path
        fill="#0F172A"
        d="M0,15 L48,13 C96,11,192,7,288,9 C384,11,480,19,576,22 C672,25,768,23,864,19 C960,15,1056,9,1152,9 C1248,9,1344,15,1392,18 L1440,21 L1440,40 L1392,40 C1344,40,1248,40,1152,40 C1056,40,960,40,864,40 C768,40,672,40,576,40 C480,40,384,40,288,40 C192,40,96,40,48,40 L0,40 Z"
      >
      </path>
    </svg>
  </div>

  <!-- スクロールインジケーター -->
  <div
    class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex flex-col items-center animate-bounce"
  >
    <span class="text-xs text-gray-400 mb-2 tracking-wider">スクロール</span>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 text-indigo-400"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
    </svg>
  </div>
</section>

<style>
  /* 幾何学グリッド */
  .geometric-grid {
    background-image: linear-gradient(
        rgba(255, 255, 255, 0.1) 1px,
        transparent 1px
      ),
      linear-gradient(90deg, rgba(255, 255, 255, 0.1) 1px, transparent 1px),
      linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size:
      100px 100px,
      100px 100px,
      20px 20px,
      20px 20px;
    background-position:
      -1px -1px,
      -1px -1px,
      -1px -1px,
      -1px -1px;
  }

  /* 大きなサークルパターン */
  .circle-pattern-large {
    background-image: radial-gradient(
        circle at 20% 30%,
        rgba(99, 102, 241, 0.15) 0,
        rgba(99, 102, 241, 0) 150px
      ),
      radial-gradient(
        circle at 80% 70%,
        rgba(59, 130, 246, 0.15) 0,
        rgba(59, 130, 246, 0) 150px
      );
  }

  /* 六角形パターン */
  .hexagon-pattern {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='28' height='49' viewBox='0 0 28 49'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/svg%3E");
  }

  /* 対角線パターン */
  .diagonal-pattern {
    background-image: repeating-linear-gradient(
        45deg,
        rgba(255, 255, 255, 0.05),
        rgba(255, 255, 255, 0.05) 2px,
        transparent 2px,
        transparent 10px
      ),
      repeating-linear-gradient(
        -45deg,
        rgba(255, 255, 255, 0.03),
        rgba(255, 255, 255, 0.03) 2px,
        transparent 2px,
        transparent 10px
      );
  }

  /* 波形パターン */
  .wave-pattern {
    background-image: repeating-radial-gradient(
      circle at 50% 50%,
      transparent,
      transparent 40px,
      rgba(255, 255, 255, 0.03) 40px,
      rgba(255, 255, 255, 0.03) 80px
    );
  }

  /* 幾何学装飾要素 */
  .geometric-square {
    width: 100px;
    height: 100px;
    border: 2px solid rgba(255, 255, 255, 0.2);
    transform: rotate(45deg);
    animation: rotateSlowly 20s linear infinite;
  }

  .geometric-circle {
    width: 120px;
    height: 120px;
    border: 2px solid rgba(99, 102, 241, 0.2);
    border-radius: 50%;
    animation: pulseSlowly 15s ease-in-out infinite;
  }

  .geometric-triangle {
    width: 0;
    height: 0;
    border-left: 50px solid transparent;
    border-right: 50px solid transparent;
    border-bottom: 86px solid rgba(255, 255, 255, 0.1);
    animation: rotateSlowly 25s linear infinite reverse;
  }

  .geometric-diamond {
    width: 80px;
    height: 80px;
    border: 2px solid rgba(59, 130, 246, 0.2);
    transform: rotate(45deg);
    animation: pulseAndRotate 18s ease-in-out infinite;
  }

  /* パーティクルアニメーション */
  .particle-container {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  /* アニメーション定義 */
  @keyframes rotateSlowly {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes pulseSlowly {
    0%,
    100% {
      transform: scale(1);
      opacity: 0.2;
    }
    50% {
      transform: scale(1.2);
      opacity: 0.3;
    }
  }

  @keyframes pulseAndRotate {
    0%,
    100% {
      transform: rotate(45deg) scale(1);
      opacity: 0.2;
    }
    50% {
      transform: rotate(225deg) scale(1.2);
      opacity: 0.3;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // 3D幾何学アニメーションの初期化
    initThreeAnimation();

    // パーティクルアニメーションの初期化
    initParticles();
  });

  function initParticles() {
    const container = document.querySelector(".particle-container");
    if (!container) return;

    // パーティクルの数
    const PARTICLE_COUNT = 70;

    for (let i = 0; i < PARTICLE_COUNT; i++) {
      const particle = document.createElement("div");

      // パーティクルのスタイル
      particle.style.position = "absolute";
      particle.style.width = `${Math.random() * 6 + 1}px`;
      particle.style.height = particle.style.width;
      particle.style.backgroundColor = `rgba(255, 255, 255, ${Math.random() * 0.3 + 0.1})`;
      particle.style.borderRadius = "50%";

      // 初期位置
      particle.style.left = `${Math.random() * 100}%`;
      particle.style.top = `${Math.random() * 100}%`;

      // アニメーション
      particle.style.animation = `float ${Math.random() * 15 + 10}s linear infinite`;
      particle.style.opacity = "0";

      // アニメーションの遅延
      particle.style.animationDelay = `${Math.random() * 5}s`;

      container.appendChild(particle);
    }

    // キーフレームアニメーションの追加
    const styleSheet = document.createElement("style");
    styleSheet.textContent = `
      @keyframes float {
        0% {
          transform: translateY(0) translateX(0);
          opacity: 0;
        }
        10% {
          opacity: 1;
        }
        90% {
          opacity: 1;
        }
        100% {
          transform: translateY(-120px) translateX(${Math.random() * 100 - 50}px);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(styleSheet);
  }

  function initThreeAnimation() {
    // Three.jsのスクリプトを動的に読み込み
    const script = document.createElement("script");
    script.src =
      "https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js";
    script.onload = setupAnimation;
    document.head.appendChild(script);
  }

  function setupAnimation() {
    const container = document.getElementById("three-container");
    if (!container) return;

    // シーンの設定
    const scene = new THREE.Scene();

    // カメラの設定
    const camera = new THREE.PerspectiveCamera(
      70,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    // レンダラーの設定
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0);
    container.appendChild(renderer.domElement);

    // ジオメトリの作成
    const geometries = [];
    const materials = [];
    const meshes = [];

    // 複数のオブジェクトを作成 - 数を増やす
    for (let i = 0; i < 50; i++) {
      let geometry;
      const type = Math.floor(Math.random() * 5);

      // より多様な形状を選択
      if (type === 0) {
        geometry = new THREE.IcosahedronGeometry(0.3, 0);
      } else if (type === 1) {
        geometry = new THREE.TetrahedronGeometry(0.4, 0);
      } else if (type === 2) {
        geometry = new THREE.BoxGeometry(0.4, 0.4, 0.4);
      } else if (type === 3) {
        geometry = new THREE.OctahedronGeometry(0.3, 0);
      } else {
        geometry = new THREE.DodecahedronGeometry(0.3, 0);
      }

      geometries.push(geometry);

      // マテリアルを作成 - 色をより鮮やかに
      const material = new THREE.MeshBasicMaterial({
        color: new THREE.Color(
          Math.random() * 0.2 + 0.1,
          Math.random() * 0.2 + 0.3,
          Math.random() * 0.3 + 0.5
        ),
        wireframe: true,
        transparent: true,
        opacity: Math.random() * 0.3 + 0.2, // 不透明度を上げる
      });

      materials.push(material);

      // メッシュを作成
      const mesh = new THREE.Mesh(geometry, material);

      // より広い範囲にランダムな位置に配置
      mesh.position.x = (Math.random() - 0.5) * 20;
      mesh.position.y = (Math.random() - 0.5) * 20;
      mesh.position.z = (Math.random() - 0.5) * 10;

      // 回転の初期値
      mesh.rotation.x = Math.random() * Math.PI;
      mesh.rotation.y = Math.random() * Math.PI;

      // メッシュにアニメーション用のデータを追加 - より速い動きに
      mesh.userData = {
        rotationSpeed: {
          x: (Math.random() - 0.5) * 0.015,
          y: (Math.random() - 0.5) * 0.015,
          z: (Math.random() - 0.5) * 0.015,
        },
        floating: {
          speed: Math.random() * 0.007 + 0.003,
          factor: Math.random() * 2.5 + 1,
          time: Math.random() * 100,
        },
      };

      meshes.push(mesh);
      scene.add(mesh);
    }

    // リサイズハンドラ
    window.addEventListener("resize", () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // マウス操作
    const mouse = { x: 0, y: 0 };

    document.addEventListener("mousemove", (event) => {
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    });

    // アニメーションループ
    function animate() {
      requestAnimationFrame(animate);

      // カメラを微妙に動かす
      camera.position.x += (mouse.x * 0.7 - camera.position.x) * 0.05;
      camera.position.y += (mouse.y * 0.7 - camera.position.y) * 0.05;
      camera.lookAt(scene.position);

      // 各オブジェクトを回転
      meshes.forEach((mesh) => {
        mesh.rotation.x += mesh.userData.rotationSpeed.x;
        mesh.rotation.y += mesh.userData.rotationSpeed.y;
        mesh.rotation.z += mesh.userData.rotationSpeed.z;

        // 浮遊アニメーション
        mesh.userData.floating.time += mesh.userData.floating.speed;
        const floatY =
          Math.sin(mesh.userData.floating.time) *
          0.12 *
          mesh.userData.floating.factor;
        const floatX =
          Math.cos(mesh.userData.floating.time * 0.7) *
          0.07 *
          mesh.userData.floating.factor;

        mesh.position.y += floatY * 0.01;
        mesh.position.x += floatX * 0.01;
      });

      renderer.render(scene, camera);
    }

    animate();
  }
</script>
