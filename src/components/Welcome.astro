<section
  class="relative w-full min-h-screen overflow-hidden flex items-center justify-center bg-gradient-to-b from-gray-900 via-blue-900 to-indigo-900"
>
  <!-- 簡略化した背景 (初期表示用) -->
  <div class="absolute inset-0 z-0 overflow-hidden">
    <!-- グラデーションオーバーレイ (軽量) -->
    <div
      class="absolute inset-0 bg-gradient-to-tr from-blue-900/40 via-transparent to-transparent"
    >
    </div>

    <!-- 簡略化したグリッドオーバーレイ (軽量) -->
    <div class="absolute inset-0 geometric-grid opacity-40"></div>

    <!-- 3D幾何学アニメーション用プレースホルダー -->
    <div
      id="three-container"
      class="absolute inset-0 opacity-0 transition-opacity duration-1000"
    >
    </div>

    <!-- パーティクルレイヤープレースホルダー -->
    <div class="particle-container absolute inset-0"></div>
  </div>

  <div
    class="container mx-auto px-4 md:px-8 relative z-10 flex flex-col items-center justify-center py-16"
  >
    <!-- ヒーローコンテンツ - 中央揃え -->
    <div class="text-center max-w-2xl">
      <h1 class="text-4xl md:text-5xl font-light leading-tight text-white">
        Webで、温かいつながりを。
      </h1>

      <p class="mt-6 text-lg text-gray-300 mx-auto font-light leading-relaxed">
        十勝・帯広の皆様のデジタルの可能性を広げる、温もりのあるWebソリューション
      </p>

      <div
        class="mt-10 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-6 justify-center"
      >
        <a
          href="#services"
          class="relative px-8 py-3 overflow-hidden text-white transition-all bg-indigo-600 group rounded-sm hover:bg-indigo-700 shadow-lg shadow-indigo-600/30"
        >
          <span
            class="absolute inset-0 w-0 bg-white/10 transition-all duration-300 ease-out group-hover:w-full"
          ></span>
          <span
            class="relative flex items-center justify-center text-sm tracking-wider"
          >
            サービスを見る
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
            </svg>
          </span>
        </a>
        <a
          href="#contact"
          class="relative overflow-hidden text-indigo-300 transition-all border border-indigo-600/60 group rounded-sm px-8 py-3 hover:border-indigo-400/80"
        >
          <span
            class="absolute inset-0 w-0 bg-indigo-600/20 transition-all duration-300 ease-out group-hover:w-full"
          ></span>
          <span
            class="relative flex items-center justify-center text-sm tracking-wider group-hover:text-white"
          >
            無料相談する
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-4 h-4 ml-2 opacity-0 group-hover:opacity-100 transform -translate-x-2 group-hover:translate-x-0 transition-all"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
              ></path>
            </svg>
          </span>
        </a>
      </div>
    </div>

    <!-- 実績ハイライト - 中央揃え -->
    <!-- 実績ハイライト - ビジュアル強化版 -->
    <div class="mt-20 mb-6 max-w-5xl mx-auto">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8">
        <!-- プロジェクト実績 -->
        <div
          class="group relative overflow-hidden backdrop-blur-md bg-white/5 border border-white/10 p-6 rounded-sm transition-all duration-300 hover:bg-indigo-900/20 hover:border-indigo-500/30 hover:shadow-lg hover:shadow-indigo-500/10"
        >
          <!-- 装飾的な背景要素 (シンプル化) -->
          <div
            class="absolute -right-12 -top-12 w-32 h-32 bg-indigo-600/10 rounded-full blur-2xl"
          >
          </div>

          <!-- アイコン -->
          <div class="relative flex justify-center mb-4">
            <div
              class="w-14 h-14 flex items-center justify-center rounded-full bg-indigo-500/10 text-indigo-400 mb-1"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-7 w-7"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                ></path>
              </svg>
            </div>
          </div>

          <!-- 数字とテキスト -->
          <div class="relative text-center">
            <div class="flex items-center justify-center">
              <span class="text-5xl font-light text-white"> 100 </span>
              <span class="text-indigo-400 text-3xl ml-1 font-light">+</span>
            </div>
            <span
              class="text-gray-300 text-sm tracking-wider block mt-2 group-hover:text-indigo-300 transition-colors"
            >
              制作プロジェクト
            </span>
            <p
              class="mt-3 text-xs text-gray-400 leading-relaxed opacity-70 group-hover:opacity-100 transition-opacity"
            >
              Shopify、Astro、WordPressなど、多様な技術スタックで最適なサイトを開発
            </p>
          </div>
        </div>

        <!-- パフォーマンス -->
        <div
          class="group relative overflow-hidden backdrop-blur-md bg-white/5 border border-white/10 p-6 rounded-sm transition-all duration-300 hover:bg-indigo-900/20 hover:border-indigo-500/30 hover:shadow-lg hover:shadow-indigo-500/10"
        >
          <!-- 装飾的な背景要素 (シンプル化) -->
          <div
            class="absolute -right-12 -top-12 w-32 h-32 bg-indigo-600/10 rounded-full blur-2xl"
          >
          </div>

          <!-- アイコン -->
          <div class="relative flex justify-center mb-4">
            <div
              class="w-14 h-14 flex items-center justify-center rounded-full bg-indigo-500/10 text-indigo-400 mb-1"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-7 w-7"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
          </div>

          <!-- 数字とテキスト -->
          <div class="relative text-center">
            <div class="flex items-center justify-center">
              <span class="text-5xl font-light text-white"> 90 </span>
              <span class="text-indigo-400 text-3xl ml-1 font-light">+</span>
            </div>
            <span
              class="text-gray-300 text-sm tracking-wider block mt-2 group-hover:text-indigo-300 transition-colors"
            >
              サイトスピード評価
            </span>
            <p
              class="mt-3 text-xs text-gray-400 leading-relaxed opacity-70 group-hover:opacity-100 transition-opacity"
            >
              ページ読み込み速度を徹底的に最適化し、高速で快適なユーザー体験を提供
            </p>
          </div>
        </div>

        <!-- 教育・指導 -->
        <div
          class="group relative overflow-hidden backdrop-blur-md bg-white/5 border border-white/10 p-6 rounded-sm transition-all duration-300 hover:bg-indigo-900/20 hover:border-indigo-500/30 hover:shadow-lg hover:shadow-indigo-500/10"
        >
          <!-- 装飾的な背景要素 (シンプル化) -->
          <div
            class="absolute -right-12 -top-12 w-32 h-32 bg-indigo-600/10 rounded-full blur-2xl"
          >
          </div>

          <!-- アイコン -->
          <div class="relative flex justify-center mb-4">
            <div
              class="w-14 h-14 flex items-center justify-center rounded-full bg-indigo-500/10 text-indigo-400 mb-1"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-7 w-7"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                ></path>
              </svg>
            </div>
          </div>

          <!-- 数字とテキスト -->
          <div class="relative text-center">
            <div class="flex items-center justify-center">
              <span class="text-5xl font-light text-white"> 3 </span>
              <span class="text-indigo-400 text-3xl ml-1 font-light">年</span>
            </div>
            <span
              class="text-gray-300 text-sm tracking-wider block mt-2 group-hover:text-indigo-300 transition-colors"
            >
              専門知識と実績
            </span>
            <p
              class="mt-3 text-xs text-gray-400 leading-relaxed opacity-70 group-hover:opacity-100 transition-opacity"
            >
              侍エンジニア講師としての経験を活かした、確かな技術力と教育力
            </p>
          </div>
        </div>
      </div>

      <!-- 補足説明テキスト -->
      <div class="text-center mt-8">
        <p class="text-xs text-gray-400 tracking-wide max-w-2xl mx-auto">
          スポーツ、美容など多様な業種に対応。クライアントのニーズに合わせた最適なソリューションを提供します。
        </p>
      </div>
    </div>
  </div>

  <!-- 下部の装飾 -->
  <div class="absolute bottom-0 left-0 w-full overflow-hidden">
    <!-- 波パターン -->
    <svg
      class="absolute bottom-0 left-0 w-full"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1440 200"
      preserveAspectRatio="none"
    >
      <path
        fill="#1E293B"
        fill-opacity="0.5"
        d="M0,64L60,64C120,64,240,64,360,74.7C480,85,600,107,720,112C840,117,960,107,1080,101.3C1200,96,1320,96,1380,96L1440,96L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"
      >
      </path>
    </svg>

    <!-- ミニマルな山々のシルエット - 十勝の丘陵地帯を表現 -->
    <svg
      class="absolute bottom-0 left-0 w-full"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1440 100"
      preserveAspectRatio="none"
    >
      <path
        fill="#1E293B"
        fill-opacity="0.7"
        d="M0,80 L80,60 L160,90 L240,70 L320,90 L400,50 L480,70 L560,50 L640,80 L720,60 L800,90 L880,70 L960,50 L1040,80 L1120,60 L1200,90 L1280,60 L1360,80 L1440,60 L1440,100 L0,100 Z"
      >
      </path>
    </svg>

    <!-- 十勝パノラマシルエット（より詳細な山々のシルエット） -->
    <svg
      class="absolute bottom-0 left-0 w-full"
      height="40"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1440 40"
      preserveAspectRatio="none"
    >
      <path
        fill="#0F172A"
        d="M0,15 L48,13 C96,11,192,7,288,9 C384,11,480,19,576,22 C672,25,768,23,864,19 C960,15,1056,9,1152,9 C1248,9,1344,15,1392,18 L1440,21 L1440,40 L1392,40 C1344,40,1248,40,1152,40 C1056,40,960,40,864,40 C768,40,672,40,576,40 C480,40,384,40,288,40 C192,40,96,40,48,40 L0,40 Z"
      >
      </path>
    </svg>
  </div>

  <!-- スクロールインジケーター -->
  <div
    class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex flex-col items-center animate-bounce"
  >
    <span class="text-xs text-gray-400 mb-2 tracking-wider">スクロール</span>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 text-indigo-400"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
    </svg>
  </div>

  <!-- 高品質表示ボタン - 修正版 -->
  <button
    id="enable-effects"
    class="absolute bottom-20 right-4 px-3 py-1 text-xs bg-indigo-600/50 text-white rounded-sm hover:bg-indigo-600/70 transition-colors opacity-50 hover:opacity-100 z-40"
    style="display: none;"
  >
    高品質表示OFF
  </button>
</section>

<style>
  /* 幾何学グリッド (軽量版) */
  .geometric-grid {
    background-image: linear-gradient(
        rgba(255, 255, 255, 0.05) 1px,
        transparent 1px
      ),
      linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 100px 100px;
  }

  /* アニメーション定義を簡略化 */
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  /* スムーズなアニメーション */
  .fadein-element {
    animation: fadeIn 0.5s ease-in forwards;
    opacity: 0;
  }
</style>
<script>
  // 軽量な初期化スクリプト
  document.addEventListener("DOMContentLoaded", () => {
    // スクロールアニメーションなどの基本的な要素
    setupBasicAnimations();

    // 高品質表示ボタンの設定
    setupQualityToggleButton();

    // ユーザーインタラクション検出 (スクロール/マウス移動/タップ)
    detectUserInteraction();
  });

  // 基本的なアニメーション設定
  function setupBasicAnimations() {
    // 軽量なフェードインアニメーション
    const fadeElements = document.querySelectorAll(".group");

    // 交差オブザーバーを使って要素が表示されたときだけアニメーション
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("fadein-element");
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    fadeElements.forEach((el) => observer.observe(el));
  }

  // 高品質表示ボタンの設定 - 修正版
  function setupQualityToggleButton() {
    const effectsButton = document.getElementById("enable-effects");
    if (!effectsButton) return;

    // 状態管理の改善
    let effectsEnabled = false;
    let isLoading = false;

    // 3秒後にボタンを表示
    setTimeout(() => {
      effectsButton.style.display = "block";
    }, 3000);

    // ボタンクリックイベントの改善
    effectsButton.addEventListener("click", async () => {
      // 読み込み中は操作不可
      if (isLoading) return;

      if (!effectsEnabled) {
        // OFFからONに切り替え
        isLoading = true;
        effectsButton.textContent = "読み込み中...";
        effectsButton.disabled = true;

        try {
          await loadRichEffects();
          effectsEnabled = true;
          effectsButton.textContent = "高品質表示ON";
          effectsButton.classList.remove("bg-indigo-600/50");
          effectsButton.classList.add("bg-green-600/50");
        } catch (error) {
          console.error("エフェクト読み込みエラー:", error);
          effectsButton.textContent = "高品質表示OFF (エラー)";
        } finally {
          isLoading = false;
          effectsButton.disabled = false;
        }
      } else {
        // ONからOFFに切り替え
        isLoading = true;
        effectsButton.textContent = "切替中...";
        effectsButton.disabled = true;

        try {
          disableRichEffects();
          effectsEnabled = false;
          effectsButton.textContent = "高品質表示OFF";
          effectsButton.classList.remove("bg-green-600/50");
          effectsButton.classList.add("bg-indigo-600/50");
        } catch (error) {
          console.error("エフェクト無効化エラー:", error);
        } finally {
          isLoading = false;
          effectsButton.disabled = false;
        }
      }
    });
  }

  // ユーザーインタラクションの検出
  let hasInteracted = false;
  function detectUserInteraction() {
    const triggerRichEffects = () => {
      if (!hasInteracted) {
        hasInteracted = true;
        // 1.5秒後 (ページ読み込み完了を確認するため) にエフェクト読み込み
        setTimeout(() => {
          const effectsButton = document.getElementById("enable-effects");
          if (effectsButton && effectsButton.textContent === "高品質表示OFF") {
            // ユーザーがまだ切り替えていない場合のみ自動読み込み
            loadRichEffects().then(() => {
              effectsButton.textContent = "高品質表示ON";
              effectsButton.classList.remove("bg-indigo-600/50");
              effectsButton.classList.add("bg-green-600/50");
            });
          }
        }, 1500);
      }
    };

    // スクロールが最初の画面を過ぎたら読み込み
    window.addEventListener(
      "scroll",
      () => {
        if (window.scrollY > window.innerHeight * 0.5 && !hasInteracted) {
          triggerRichEffects();
        }
      },
      { passive: true }
    );

    // マウス移動でも読み込み (十分な動きがあった場合)
    let mouseMovements = 0;
    window.addEventListener(
      "mousemove",
      () => {
        mouseMovements++;
        if (mouseMovements > 15 && !hasInteracted) {
          triggerRichEffects();
        }
      },
      { passive: true }
    );
  }

  // リッチエフェクトを無効化する関数 - 修正版
  function disableRichEffects() {
    return new Promise((resolve) => {
      try {
        // Three.jsのコンテナを非表示に
        const container = document.getElementById("three-container");
        if (container) {
          container.style.opacity = "0";

          // アニメーションを停止・クリーンアップ
          if (
            window.threeCleanup &&
            typeof window.threeCleanup === "function"
          ) {
            window.threeCleanup();
          }

          // 少し待ってからコンテナをクリア (アニメーション完了後)
          setTimeout(() => {
            container.innerHTML = "";

            // パーティクルもクリア
            const particleContainer = document.querySelector(
              ".particle-container"
            );
            if (particleContainer) {
              particleContainer.innerHTML = "";
            }

            resolve();
          }, 500); // フェードアウトを待つ
        } else {
          resolve();
        }
      } catch (error) {
        console.error("エフェクト無効化中にエラーが発生しました:", error);
        resolve(); // エラーでも解決する
      }
    });
  }

  // リッチエフェクトの読み込み - 修正版
  function loadRichEffects() {
    return new Promise(async (resolve, reject) => {
      try {
        // 機能検出 (ブラウザパフォーマンスを確認)
        const canUseRichEffects =
          "IntersectionObserver" in window &&
          !matchMedia("(prefers-reduced-motion: reduce)").matches;

        if (!canUseRichEffects) {
          console.log(
            "ブラウザが高度なエフェクトをサポートしていないか、ユーザーが省モーションを好んでいます"
          );
          return reject(new Error("エフェクトはサポートされていません"));
        }

        // Three.jsが既に読み込まれているかチェック
        if (window.THREE) {
          initializeEffects();
          return resolve();
        }

        // Three.jsを動的に読み込み
        const threeScript = document.createElement("script");
        threeScript.src =
          "https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js";
        threeScript.async = true;

        // エラーハンドリングを追加
        threeScript.onerror = () => {
          reject(new Error("Three.js の読み込みに失敗しました"));
        };

        threeScript.onload = () => {
          initializeEffects();
          resolve();
        };

        document.head.appendChild(threeScript);

        // タイムアウト設定（10秒でタイムアウト）
        setTimeout(() => {
          if (!window.THREE) {
            reject(new Error("Three.js の読み込みがタイムアウトしました"));
          }
        }, 10000);
      } catch (error) {
        console.error(
          "リッチエフェクトの読み込み中にエラーが発生しました:",
          error
        );
        reject(error);
      }
    });
  }

  // エフェクトの初期化（Three.js + パーティクル）
  function initializeEffects() {
    // 読み込み完了後にコンテナを表示
    const container = document.getElementById("three-container");
    if (container) {
      initThreeAnimation(container);
      // アニメーション初期化後にフェードイン
      setTimeout(() => {
        container.style.opacity = "1";
      }, 100);
    }

    // パーティクルも初期化
    initParticles();
  }

  // Three.jsアニメーション初期化 (簡略化版)
  function initThreeAnimation(container) {
    if (!window.THREE) {
      console.error("Three.js が読み込まれていません");
      return;
    }

    // シーンの設定
    const scene = new THREE.Scene();

    // カメラの設定
    const camera = new THREE.PerspectiveCamera(
      70,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    // レンダラーの設定
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0);
    container.appendChild(renderer.domElement);

    // 軽量化のため、オブジェクト数を削減
    const meshCount = window.innerWidth < 768 ? 15 : 30; // モバイルではさらに削減
    const meshes = [];

    // 3Dオブジェクトを作成 (簡略化)
    for (let i = 0; i < meshCount; i++) {
      // 形状をランダムに選択
      const geometry = [
        new THREE.IcosahedronGeometry(0.3, 0),
        new THREE.TetrahedronGeometry(0.4, 0),
        new THREE.BoxGeometry(0.4, 0.4, 0.4),
      ][Math.floor(Math.random() * 3)];

      // マテリアルを作成 (ワイヤーフレームのみ)
      const material = new THREE.MeshBasicMaterial({
        color: new THREE.Color(
          Math.random() * 0.2 + 0.1,
          Math.random() * 0.2 + 0.3,
          Math.random() * 0.3 + 0.5
        ),
        wireframe: true,
        transparent: true,
        opacity: Math.random() * 0.3 + 0.2,
      });

      // メッシュを作成
      const mesh = new THREE.Mesh(geometry, material);

      // 広い範囲ではなく画面中央付近に配置
      mesh.position.x = (Math.random() - 0.5) * 15;
      mesh.position.y = (Math.random() - 0.5) * 15;
      mesh.position.z = (Math.random() - 0.5) * 8;

      // 回転速度を抑える
      mesh.userData = {
        rotationSpeed: {
          x: (Math.random() - 0.5) * 0.01,
          y: (Math.random() - 0.5) * 0.01,
          z: (Math.random() - 0.5) * 0.01,
        },
        floating: {
          speed: Math.random() * 0.005 + 0.002,
          factor: Math.random() * 2 + 1,
          time: Math.random() * 100,
        },
      };

      meshes.push(mesh);
      scene.add(mesh);
    }

    // リサイズハンドラ (デバウンス付き)
    let resizeTimeout;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      }, 250);
    });

    // マウス操作 (パフォーマンス考慮)
    const mouse = { x: 0, y: 0 };
    let mouseMoveTimeout;

    document.addEventListener(
      "mousemove",
      (event) => {
        clearTimeout(mouseMoveTimeout);
        mouseMoveTimeout = setTimeout(() => {
          mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
          mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
        }, 50); // 50ms毎に更新 (節約)
      },
      { passive: true }
    );

    // アニメーションループ (最適化)
    let animationFrameId;
    let frameSkip = 0; // フレームスキップカウンター

    function animate() {
      animationFrameId = requestAnimationFrame(animate);

      // 低スペックデバイスではフレームをスキップして負荷軽減
      frameSkip++;
      if (frameSkip % 2 !== 0) return; // 2フレームに1回だけ処理

      // カメラをゆっくり動かす
      camera.position.x += (mouse.x * 0.5 - camera.position.x) * 0.03;
      camera.position.y += (mouse.y * 0.5 - camera.position.y) * 0.03;
      camera.lookAt(scene.position);

      // オブジェクトをゆっくり回転
      meshes.forEach((mesh) => {
        mesh.rotation.x += mesh.userData.rotationSpeed.x;
        mesh.rotation.y += mesh.userData.rotationSpeed.y;

        // 浮遊アニメーション (簡略化)
        mesh.userData.floating.time += mesh.userData.floating.speed;
        const floatY =
          Math.sin(mesh.userData.floating.time) *
          0.1 *
          mesh.userData.floating.factor;

        mesh.position.y += floatY * 0.01;
      });

      renderer.render(scene, camera);
    }

    animate();

    // クリーンアップ関数をグローバルに保存
    window.threeCleanup = function () {
      cancelAnimationFrame(animationFrameId);
      // メモリリーク防止のためのクリーンアップ
      meshes.forEach((mesh) => {
        mesh.geometry.dispose();
        mesh.material.dispose();
        scene.remove(mesh);
      });
      renderer.dispose();
    };
  }

  // パーティクルアニメーションの初期化（軽量版）
  function initParticles() {
    const container = document.querySelector(".particle-container");
    if (!container) return;

    // 既存のパーティクルをクリア
    container.innerHTML = "";

    // パーティクルの数を減らす (モバイルではさらに削減)
    const PARTICLE_COUNT = window.innerWidth < 768 ? 20 : 40;

    for (let i = 0; i < PARTICLE_COUNT; i++) {
      const particle = document.createElement("div");

      // パーティクルのスタイル
      particle.style.position = "absolute";
      particle.style.width = `${Math.random() * 4 + 1}px`;
      particle.style.height = particle.style.width;
      particle.style.backgroundColor = `rgba(255, 255, 255, ${Math.random() * 0.2 + 0.1})`;
      particle.style.borderRadius = "50%";

      // 初期位置 (画面上部に集中)
      particle.style.left = `${Math.random() * 100}%`;
      particle.style.top = `${Math.random() * 50}%`;

      // アニメーション - より長い時間をかけてゆっくり動かす
      particle.style.animation = `float ${Math.random() * 20 + 15}s linear infinite`;
      particle.style.opacity = "0";

      // アニメーションの遅延をランダム化
      particle.style.animationDelay = `${Math.random() * 8}s`;

      container.appendChild(particle);
    }

    // キーフレームアニメーションの追加
    // スタイルシートが既に存在する場合は追加しない
    if (!document.getElementById("particle-animation-style")) {
      const styleSheet = document.createElement("style");
      styleSheet.id = "particle-animation-style";
      styleSheet.textContent = `
      @keyframes float {
        0% {
          transform: translateY(0) translateX(0);
          opacity: 0;
        }
        10% {
          opacity: 0.7;
        }
        90% {
          opacity: 0.5;
        }
        100% {
          transform: translateY(-100px) translateX(${Math.random() * 60 - 30}px);
          opacity: 0;
        }
      }
    `;
      document.head.appendChild(styleSheet);
    }
  }
</script>
